@page "/preparations"
@using HCatalystProjectCostsSite.Models
@using System.Collections.ObjectModel
@using HCatalystProjectCostsSite.Enums
@using HCatalystProjectCostsSite.Helpers
@inject HttpClient httpClient;
@inject ISnackbar _snackbar

<PageTitle>Preparation</PageTitle>
<ColouredHeader headerText="Preparation"/>

@* @if(_cost is not null) *@
@* { *@
@*     <MudText Typo="Typo.h4" GutterBottom="true">New Cost</MudText> *@
@*     <CostInput cost="@_cost"/> *@
@*     <MudPaper Class="my-4 pa-2"> *@
@*         <MudStack Row="true"> *@
@*             <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="AddToCosts">Add To Costs</MudButton> *@
@*             <MudButton Color="Color.Secondary" Variant="Variant.Filled" @onclick="CancelCost">Cancel</MudButton> *@
@*         </MudStack> *@
@*     </MudPaper> *@
@*     <MudDivider Class="mb-8"/> *@
@* } *@


<MudStack Row="true" AlignItems="AlignItems.Center">
    <MudText Typo="Typo.h3" GutterBottom="false">Preparation Costs</MudText>
    @if (_cost is null)
    {
        <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="NewCost">Add A New Cost</MudButton>

            @* <MudPaper Class="ma-2 pa-2" > *@
            @*     <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="NewCost">Add A New Cost</MudButton> *@
            @* </MudPaper> *@
    }
</MudStack>


<MudText Typo="Typo.h4" Class="my-8" GutterBottom="false" Color="Color.Primary">Non-Recurring Costs</MudText>
<NonRecurringCostsDataGrid costs="@costs"/>

<MudText Typo="Typo.h4" Class="my-8" GutterBottom="false" Color="Color.Primary">Recurring Costs</MudText>
<RecurringCostDataGrid costs="@recurringCosts"/>

<MudFab Style="position: fixed; bottom: 20px; right: 20px;" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="() => _costSideViewIsOpen = true"/>
<CostInputSideView cost="@_costSideView" isOpen="_costSideViewIsOpen" onSubmitClickCallback="Callback"/>

@* <MudButton Variant="Variant.Outlined" Class="mt-16" OnClick="() => _costSideViewIsOpen = true">Open Side Cost</MudButton> *@
@* <MudSwitch @bind-Checked="_hidePosition">Hide <b>position</b> when Breakpoint=Xs</MudSwitch> *@
@* <MudSwitch @bind-Checked="_loading">Show Loading</MudSwitch> *@
@* <MudText Class="mb-4">Current count: @currentCount</MudText> *@

@code {

    private ObservableCollection<Cost> costs { get; set; } = new();
    private ObservableCollection<Cost> recurringCosts { get; set; } = new();
    private Cost? _cost;

    private Cost _costSideView = new();
    private bool _costSideViewIsOpen = false;

    private bool _hidePosition;
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        //_assumptions = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
        var loadedCosts = await httpClient.GetFromJsonAsync<List<Cost>>(PathHelper.costsGetConnString);

        if (loadedCosts is null) return;

        foreach (var loadedCost in loadedCosts)
        {
            if (loadedCost.recurring)
            {
                recurringCosts.Add(loadedCost);
            }
            else
            {
                costs.Add(loadedCost);
            }
        }
        
    }

    private async void AddToCosts()
    {
        if (string.IsNullOrWhiteSpace(_cost?.submission.author) 
            || string.IsNullOrWhiteSpace(_cost.submission.text)
            || string.IsNullOrWhiteSpace(_cost.submission.title)) return;
        
        
        
        var response = await httpClient.PostAsJsonAsync(PathHelper.costPostConnString, _cost);

        if (response.IsSuccessStatusCode)
        {
            AddSnackBarUpdate("Upload to DB Success");
        }
        else
        {
            AddSnackBarUpdate("Upload to DB Failed", Severity.Error);
        }

        if (_cost.recurring)
        {
            recurringCosts.Add(_cost);
        }
        else
        {
            costs.Add(_cost);
        }
        
        _cost = new Cost();
    }

    private void NewCost()
    {
        _cost = new Cost();
    }

    private void CancelCost()
    {
        _cost = null;
    }
    
    private void AddSnackBarUpdate(string text, Severity severity = Severity.Success) {
        _snackbar.Clear();
        _snackbar.Add(text, severity, config =>
        {
            config.RequireInteraction = true;
            config.CloseAfterNavigation = true;
            config.ShowCloseIcon = false;
            config.Onclick = _ => Task.CompletedTask;
        });
    }

    private async void Callback()
    {
        if (string.IsNullOrWhiteSpace(_costSideView?.submission.author) 
            || string.IsNullOrWhiteSpace(_costSideView.submission.text)
            || string.IsNullOrWhiteSpace(_costSideView.submission.title)) return;
        
        
        
        var response = await httpClient.PostAsJsonAsync(PathHelper.costPostConnString, _costSideView);

        if (response.IsSuccessStatusCode)
        {
            AddSnackBarUpdate("Upload to DB Success");
        }
        else
        {
            AddSnackBarUpdate("Upload to DB Failed", Severity.Error);
        }

        if (_costSideView.recurring)
        {
            recurringCosts.Add(_costSideView);
        }
        else
        {
            costs.Add(_costSideView);
        }
        
        _costSideView = new Cost();
        
        StateHasChanged();
    }

}
