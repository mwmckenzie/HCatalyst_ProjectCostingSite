@page "/assumptions"
@using HCatalystProjectCostsSite.Models
@using HCatalystProjectCostsSite.Helpers
@using System.Collections.ObjectModel
@inject HttpClient httpClient;
@inject ISnackbar _snackbar

<PageTitle>Assumptions</PageTitle>
<DividerHeader color="Color.Secondary" typo="Typo.h2" headerText="Assumptions" />

@* <MudTable Items="@_assumptions.Take(8)" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"> *@
@*     <HeaderContent> *@
@*         <MudTh>Title</MudTh> *@
@*         <MudTh>Description</MudTh> *@
@*         <MudTh>Submitted By</MudTh> *@
@*         <MudTh>Submitted On</MudTh> *@
@*     </HeaderContent> *@
@*     <RowTemplate> *@
@*         <MudTd DataLabel="Title">@context.assumption.title</MudTd> *@
@*         <MudTd DataLabel="Description">@context.assumption.text</MudTd> *@
@*         <MudTd DataLabel="Submitted By">@context.assumption.author</MudTd> *@
@*         <MudTd DataLabel="Submitted On" HideSmall="_hidePosition">@context.assumption.submittedOn</MudTd> *@
@*     </RowTemplate> *@
@* </MudTable> *@

<AssumptionsDataGrid assumptions="_assumptions" onEditClickCallback="OnCostEditClicked"/>


<MudFab Style="position: fixed; bottom: 20px; right: 20px;" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" 
        OnClick="() => _assumptionSideViewIsOpen = true"/>

<AssumptionInputSideView assumption="@_assumption" isOpen="_assumptionSideViewIsOpen"
                         onSubmitClickCallback="SubmitCallback" onCancelClickCallback="CancelCostCallback"/>



@code {

    private ObservableCollection<Assumption>?  _assumptions = new();
    private Assumption _assumption = new();
    private bool _assumptionSideViewIsOpen = false;

    private bool _hidePosition;
    private bool _loading;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadAssumptionsTableAsync();
    }

    private async Task LoadAssumptionsTableAsync()
    {
        var assumptionsList =
            await httpClient.GetFromJsonAsync<List<Assumption>>(PathHelper.assumptionsGetConnString);

        if (assumptionsList is null) return;

        foreach (var assumption in assumptionsList)
        {
            _assumptions?.Add(assumption);
        }
        StateHasChanged();
    }

    private async void AddToAssumptions()
    {
        if (string.IsNullOrWhiteSpace(_assumption.submission.text)
            || string.IsNullOrWhiteSpace(_assumption.submission.title)) return;

        
        _assumption.submission.submittedOn = DateTime.UtcNow.ToShortDateString();
        _assumptions?.Add(_assumption);
        
        _assumptionSideViewIsOpen = false;
        StateHasChanged();
        
        var response = await httpClient.PostAsJsonAsync(PathHelper.assumptionPostConnString, _assumption);

        if (response.IsSuccessStatusCode)
        {
            AddSnackBarUpdate("Upload to DB Success");
        }
        else
        {
            AddSnackBarUpdate("Upload to DB Failed", Severity.Error);
        }
        
        _assumption = new Assumption();
        StateHasChanged();
    }

    private void AddSnackBarUpdate(string text, Severity severity = Severity.Success) {
        _snackbar.Clear();
        _snackbar.Add(text, severity, config =>
        {
            config.RequireInteraction = true;
            config.CloseAfterNavigation = true;
            config.ShowCloseIcon = false;
            config.Onclick = _ => Task.CompletedTask;
        });
    }

    private void SubmitCallback()
    {
        AddToAssumptions();
    }

    private void CancelCostCallback()
    {
        _assumption = new Assumption();
        _assumptionSideViewIsOpen = false;
        StateHasChanged();
    }
    
    private void OnCostEditClicked(Assumption obj)
    {
        //_assumptionSideViewIsOpen = false;
        _assumptionSideViewIsOpen = true;
        _assumption = obj;
    }

}
