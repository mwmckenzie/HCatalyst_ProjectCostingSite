@using HCatalystProjectCostsSite.Models
@using System.Collections.ObjectModel
@using HCatalystProjectCostsSite.Helpers
@inject HttpClient httpClient;
@inject ISnackbar snackbar

<MudDataGrid Items="@assumptions" Filterable="false" SortMode="@SortMode.None" Groupable="false" Bordered="false">
    <ColGroup>
        <col style="width: 25%;" />
        <col style="width: 45%;" />
        <col style="width: 10%;" />
        <col style="width: 10%;" />
        <col style="width: 10%;" />
    </ColGroup>
    <Columns>
        <PropertyColumn Property="x => x.submission.title" Title="Assumption"/>
        <PropertyColumn Property="x => x.submission.text" Title="Description"/>
        <PropertyColumn Property="x => x.submission.author" Title="Submitted By"/>
        <PropertyColumn Property="x => x.submission.submittedOn" Title="Submitted On"/>
        <TemplateColumn CellClass="clm-row-small">
            <CellTemplate>
                <MudStack Row="true" Spacing="2" Justify="Justify.Center">
                    <MudIconButton OnClick="() => EditItem(context.Item)" Color="Color.Tertiary" 
                                   Variant="Variant.Filled" Icon="@Icons.Material.Filled.Edit" Size="Size.Medium"/>
                    <MudIconButton OnClick="() => DeleteItem(context.Item)" Color="Color.Secondary" 
                                   Variant="Variant.Filled" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium"/>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    
    [Parameter]
    public ObservableCollection<Assumption> assumptions { get; set; } = new();
    
    [Parameter]
    public EventCallback<Assumption> onEditClickCallback { get; set; }
    
    private async void DeleteItem(Assumption item)
    {
        snackbar.Add($"Deleting ID: {item.id}", Severity.Info);
        
        if (!assumptions.Contains(item)) return;
        assumptions.Remove(item);
        var response = await httpClient.DeleteAsync(PathHelper.GetCostDeleteConnString(item.id));

        if (response.IsSuccessStatusCode)
        {
            snackbar.Add($"Deleted ID: {item.id}", Severity.Success);
        }
        else
        {
            snackbar.Add($"Delete Failed ID: {item.id}", Severity.Error);
        }
        StateHasChanged();
    }

    private void EditItem(Assumption assumption)
    {
        onEditClickCallback.InvokeAsync(assumption);
    }
    
}