@using HCatalystProjectCostsSite.Models
@using System.Collections.ObjectModel
@using HCatalystProjectCostsSite.Enums
@using HCatalystProjectCostsSite.Helpers
@using HCatalystProjectCostsSite.Services
@inject HttpClient httpClient;
@inject ISnackbar _snackbar
@inject ConversionService conversionService;

<PageTitle>@costPhase</PageTitle>

<DividerHeader headerText="@costPhase.ToString()"/>

<MudStack Row="true" AlignItems="AlignItems.Center">
    <MudText Typo="Typo.h3" GutterBottom="false">@costPhase Costs</MudText>
</MudStack>

<MudPaper Class="mt-4 pa-4" Width="500px">
    
    <MudStack Row="true" Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h6">Total</MudText>
        <MudText Typo="Typo.h6" Color="Color.Primary">
            $@costs.Sum(x => x.CostTotalInUsd()).ToString("N0")
        </MudText>
    </MudStack>

</MudPaper>

<CollapsableCostsTable costPhase="@costPhase" costs="@costs" tableType="TableType.AllCosts"
                       tableIsShowingAtStart ="false" OnCostEditClicked="OnCostEditClicked" 
                       OnShowTableClicked="LoadCosts" isLoading="@_isLoading"/>

<CollapsableCostsTable costPhase="@costPhase" costs="@nonRecurringCosts" tableType="TableType.NonRecurringCosts"
                       tableIsShowingAtStart ="false" OnCostEditClicked="OnCostEditClicked" 
                       OnShowTableClicked="LoadCosts" isLoading="@_isLoading"/>

<CollapsableCostsTable costPhase="@costPhase" costs="@recurringCosts" tableType="TableType.RecurringCosts"
                       tableIsShowingAtStart ="false" OnCostEditClicked="OnCostEditClicked" 
                       OnShowTableClicked="LoadCosts" isLoading="@_isLoading"/>




<ConversionRatesOverlay />


<MudFab Style="position: fixed; bottom: 20px; right: 20px;" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" 
        OnClick="() => _costSideViewIsOpen = true"/>
<CostInputSideView cost="@_costSideView" isOpen="_costSideViewIsOpen" onSubmitClickCallback="SubmitCostCallback" 
                   onCancelClickCallback="CancelCostCallback" isNew="_sideViewCostIsNew"/>

@* @if (!_showTableCosts) *@
@* { *@
@*     <MudButton Class="my-4 mr-4" OnClick="() => ShowCostsTable(TableType.AllCosts)" Variant="Variant.Filled"  *@
@*                Color="Color.Primary" Size="Size.Large"> *@
@*         All Costs Table *@
@*     </MudButton> *@
@* } *@
@* @if (_showTableCosts) *@
@* { *@
@*     <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="4"> *@
@*         <MudText Typo="Typo.h4" Class="my-8" GutterBottom="false" Color="Color.Primary"> *@
@*             All @costPhase Costs *@
@*         </MudText> *@
@*         <MudButton OnClick="() => HideCostsTable(TableType.AllCosts)" Size="Size.Large" Color="Color.Secondary"> *@
@*             Hide Table *@
@*         </MudButton> *@
@*     </MudStack> *@
@*     <RecurringCostDataGrid costs="@costs" onEditClickCallback="OnCostEditClicked"/> *@
@* } *@

@* @if (!_showTableNonRecurring) *@
@* { *@
@*     <MudButton Class="my-4 mr-4" OnClick="() => ShowCostsTable(TableType.NonRecurringCosts)" Variant="Variant.Filled"  *@
@*                Color="Color.Primary" Size="Size.Large"> *@
@*         Non-Recurring Table *@
@*     </MudButton> *@
@* } *@
@* @if (_showTableNonRecurring) *@
@* { *@
@*     <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="4"> *@
@*         <MudText Typo="Typo.h4" Class="my-8" GutterBottom="false" Color="Color.Primary"> *@
@*             Non-Recurring Costs *@
@*         </MudText> *@
@*         <MudButton OnClick="() => HideCostsTable(TableType.NonRecurringCosts)"> *@
@*             Hide Table *@
@*         </MudButton> *@
@*     </MudStack> *@
@*     <RecurringCostDataGrid costs="@nonRecurringCosts" onEditClickCallback="OnCostEditClicked"/> *@
@* } *@

@* @if (!_showTableRecurring) *@
@* { *@
@*     <MudButton Class="my-4 mr-4" OnClick="() => ShowCostsTable(TableType.RecurringCosts)" Variant="Variant.Filled"  *@
@*                Color="Color.Primary" Size="Size.Large"> *@
@*         Recurring Table *@
@*     </MudButton> *@
@* } *@
@* @if (_showTableRecurring) *@
@* { *@
@*     <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="4"> *@
@*         <MudText Typo="Typo.h4" Class="my-8" GutterBottom="false" Color="Color.Primary"> *@
@*             Recurring Costs *@
@*         </MudText> *@
@*         <MudButton OnClick="() => HideCostsTable(TableType.RecurringCosts)"> *@
@*             Hide Table *@
@*         </MudButton> *@
@*     </MudStack> *@
@*     <RecurringCostDataGrid costs="@recurringCosts" onEditClickCallback="OnCostEditClicked"/> *@
@* } *@

@code {

    [Parameter]
    public CostPhase costPhase { get; set; }
    
    private ObservableCollection<Cost> costs { get; set; } = new();
    private ObservableCollection<Cost> recurringCosts { get; set; } = new();
    private ObservableCollection<Cost> nonRecurringCosts { get; set; } = new();
    private Cost? _cost;

    private Cost _costSideView = new();
    private bool _costSideViewIsOpen = false;
    private bool _sideViewCostIsNew = true;

    private bool _hidePosition;
    private bool _isLoading;

    private bool _showTableCosts = true;
    private bool _showTableNonRecurring = false;
    private bool _showTableRecurring = false;


    protected override async Task OnInitializedAsync()
    {
        await LoadCosts();
    }

    private async Task LoadCosts()
    {
        _isLoading = true;

        recurringCosts.Clear();
        nonRecurringCosts.Clear();
        costs.Clear();

        var loadedCosts = await httpClient.GetFromJsonAsync<List<Cost>>(PathHelper.costsGetConnString);

        if (loadedCosts is null) return;

        var filteredCosts = loadedCosts;
        if (costPhase > CostPhase.All)
        {
            filteredCosts = loadedCosts.Where(x => x.costPhase == costPhase).ToList();
        }
        
        foreach (var loadedCost in filteredCosts)
        {
            loadedCost.SetRates(conversionService.conversionRates);
            if (loadedCost.recurring)
            {
                if (recurringCosts.Contains(loadedCost)) continue;
                
                recurringCosts.Add(loadedCost);
            }
            else
            {
                if (nonRecurringCosts.Contains(loadedCost)) continue;
                nonRecurringCosts.Add(loadedCost);
            }
            if (costs.Contains(loadedCost)) continue;
            costs.Add(loadedCost);
        }

        _isLoading = false;
        StateHasChanged();
    }

    private void OnCostEditClicked(Cost obj)
    {
        _sideViewCostIsNew = false;
        _costSideViewIsOpen = true;
        _costSideView = obj;
    }

    private async void AddToCosts()
    {
        if (string.IsNullOrWhiteSpace(_cost?.submission.text)
            || string.IsNullOrWhiteSpace(_cost.submission.title)) return;
        
        _cost.costPhase = costPhase;
        
        var path = PathHelper.TemplateCostConnString(_cost.id, PathHelper.costUpsertByIdSuffix);
        var response = await httpClient.PutAsJsonAsync(path, _cost);

        if (response.IsSuccessStatusCode)
        {
            AddSnackBarUpdate("Upload to DB Success");
        }
        else
        {
            AddSnackBarUpdate(response.ReasonPhrase ?? "Failed To Upload", Severity.Error);
        }

        if (_cost.recurring)
        {
            recurringCosts.Add(_cost);
        }
        else
        {
            nonRecurringCosts.Add(_cost);
        }
        costs.Add(_cost);
        
        _cost = new Cost();
    }

    private void NewCost()
    {
        _cost = new Cost();
    }

    private void CancelCost()
    {
        _cost = null;
    }
    
    private void AddSnackBarUpdate(string text, Severity severity = Severity.Success) {
        _snackbar.Clear();
        _snackbar.Add(text, severity, config =>
        {
            config.RequireInteraction = true;
            config.CloseAfterNavigation = true;
            config.ShowCloseIcon = false;
            config.Onclick = _ => Task.CompletedTask;
        });
    }

    private async void SubmitCostCallback()
    {
        if (string.IsNullOrWhiteSpace(_costSideView.submission.text)
            || string.IsNullOrWhiteSpace(_costSideView.submission.title)) return;

        _costSideView.costPhase = costPhase;
        
        var response = await httpClient.PutAsJsonAsync(
            PathHelper.UpsertCostByIdConnString(_costSideView.id), _costSideView);
        
        if (response.IsSuccessStatusCode)
        {
            AddSnackBarUpdate("Upload to DB Success");
        }
        else
        {
            AddSnackBarUpdate(response.StatusCode.ToString(), Severity.Error);
        }
        
        _costSideView = new Cost();
        _costSideViewIsOpen = false;
        _sideViewCostIsNew = true;
        StateHasChanged();

        await LoadCosts(); 
    }

    private void CancelCostCallback()
    {
        _costSideView = new Cost();
        _costSideViewIsOpen = false;
        _sideViewCostIsNew = true;
    }
    

    // private async Task ShowCostsTable(TableType tableType)
    // {
    //     switch (tableType)
    //     {
    //         case TableType.AllCosts:
    //             _showTableCosts = true;
    //             break;
    //         case TableType.RecurringCosts:
    //             _showTableRecurring = true;
    //             break;
    //         case TableType.NonRecurringCosts:
    //             _showTableNonRecurring = true;
    //             break;
    //         default:
    //             throw new ArgumentOutOfRangeException(nameof(tableType), tableType, null);
    //     }
    //     await LoadCosts();
    // }
    //
    // private void HideCostsTable(TableType tableType)
    // {
    //     switch (tableType)
    //     {
    //         case TableType.AllCosts:
    //             _showTableCosts = false;
    //             break;
    //         case TableType.RecurringCosts:
    //             _showTableRecurring = false;
    //             break;
    //         case TableType.NonRecurringCosts:
    //             _showTableNonRecurring = false;
    //             break;
    //         default:
    //             throw new ArgumentOutOfRangeException(nameof(tableType), tableType, null);
    //     }
    //     StateHasChanged();
    // }

}